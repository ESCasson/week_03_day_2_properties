MVP Questions
In our Property Tracker application:

Q1. Where are we instantiating instances of the Property class?

    within the console file

Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?

    we are defining the sql in the models/property.rb within the method save()

Q3. In console.rb, which lines modify the database?

      Property.delete_all()
      property1.save()
      property2.save()

Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?

      Because the id is created by the database itself when a new record is created.
      You don't want to mess with that cause it will mess things up.


Q5. Where and how do we assign the id (that is generated by the database) to the ruby Property object?

      @id = property_details['id'].to_i() if property_details['id']
      but this only assigns the id if the property_details['id'] is passed to it.
      i.e if the hash has come from the database itself.  otherwise it will be nil.

Q6. Why do we put a guard (an if clause) on the @id attribute in the constructor?

      please see above we only want to assign an id if the hash already contains one.

Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?

    if an action is working on the whole table,
    i.e. searching the table for a result or deleting everything in a table it should be a class method
    but if it is only working on a single record/instance it is a instance method

Q8. What type of data structure is returned by calls to db.exec_prepared()?
In the save method, how do we access the id from the returned data structure?

A PG object is returned.  to access this you have to run a .map function and create
an array of objects.

Q9. Why do we use prepared statements when performing database operations?
to prevent sql injections attacks on the database.

Extension Questions
Look at the find_by_id and find_by_address methods in the Property class.

Q10. What do they take in as their arguments?

  they take in a INT and a VARCHAR respectively.

Q11. What are their return values?
  they return back a PG object that then needs to be converted into a ruby object to be handled correctly
